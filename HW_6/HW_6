function newTask() {
  console.log("========================New Task===========================");
}


/*1. Бесконечные аргументы
  - Напишите функцию, принимающую на вход любое количество массивов
  - Функция возвращает массив, в котором будут находиться все переданные в функцию в виде чисел
  - Например: mergeArrays([1,2], [3,4], [5,6]) // [1,2,3,4,5,6]
  - Решить с использованием Spread operator*/

function mergeArrays(...arrays) {
  return [].concat(...arrays);
}

let arr1 = [4, 3];
let arr2 = [2, 1];
let arr3 = [5, 6];

console.log(mergeArrays(arr1, arr2, arr3));


/*2. Devide by _
  - Написать функцию, которая преобразует любое предложение в вот_Такой_Вот_Вид и возвращает его. 
  - Первое слово должно начинаться с буквы в нижнем регистре, у остальных -  верхнем. 
  - Пример: I am super engineer => i_Am_Super_Engineer*/


newTask();
'for exapmle user name'

function transform(sentence) {
    const words = sentence.toLowerCase().split(' ')
    const result = []
    words.forEach((word, index) => {
        if (index === 0) {
            result.push(word)
            return
        }
        const newWord = word[0].toUpperCase() + word.slice(1)
        result.push(newWord)
    })
    
    return result.join('_')
}

console.log(transform('for exapmle user name'))




/*3. Фибаначчи
  - Напишите функцию fibanacci(n), возвращающую энное число Фибоначчи
  - числа Фибоначчи (строка Фибоначчи) — числовая последовательность, первые два числа которой являются 0 и 1, а каждое последующее за ними число является суммой двух предыдущих
  - Например fibanacci(8) //21*/

newTask();

function fib(n) {
  let prev = 0;
  let curr = 1;
  if (n === 0) return 0;
  let step = 1;
  while (step <= n) {
    curr = curr + prev;
    prev = curr - prev;
    step += 1;
  }
  return curr;
}

console.log(fib(6));


function newTask() {
    console.log("========================New Task===========================");
  }


  //1. Написать функцию, которая принимает на вход слово и проверяет, является ли это слово палиндромом


  
  function isPalindrome(word) {
    const reversedWord = word.split("").reverse().join("");
    return word === reversedWord;
  }
  
  // Пример использования:
  const word1 = "racecar";
  const word2 = "hello";
  
  console.log(isPalindrome(word1)); // Вывод: true
  console.log(isPalindrome(word2)); // Вывод: false
  



  /*2. Написать функцию, которая принимает предложение (слова разделенные только пробелами) в качестве параметра 
    и возвращает слово с наибольшим количеством букв. 
    Если таких слов несколько - возвращает их все*/
  newTask();
  
  function findLongestWords(sentence) {
    const words = sentence.split(" ");
    let longestLength = 0;
    let longestWords = [];
  
    for (const word of words) {
      if (word.length > longestLength) {
        longestLength = word.length;
        longestWords = [word]; // Обновляем список самых длинных слов
      } else if (word.length === longestLength) {
        longestWords.push(word); // Добавляем в список, если длина совпадает
      }
    }
  
    return longestWords;
  }
  
  // Пример использования:
  const sentence1 = "I am su";
  const sentence2 = "I am super engineer";
  
  console.log(findLongestWords(sentence1));
  console.log(findLongestWords(sentence2));
  